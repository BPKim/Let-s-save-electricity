;/*
;Project : 타이머 카운터 인터럽트 이용한 다이나믹 디스플레이 제어 (FND)
;Version : ATmega128-C V01
;Date    : 2011-07-28
;Author  : Kyung Nam Lee
;Company : LKEMBEDDED
;*/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;
;#define fnd1 0
;#define fnd2 1
;#define fnd1_on (0<<fnd1)
;#define fnd2_on (0<<fnd2)
;
;#define fnd1_off (1<<fnd1)
;#define fnd2_off (1<<fnd2)
;char Number[11]={0X3F,0X06,0X5B,0X4F,0X66,0X6D,0X7D,0X27,0X7F,0X6F};  //0~9 배열선언  FND2

	.DSEG
;unsigned int cnt=0;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)  //1ms Tick Time
; 0000 0018 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0019  static int i=0;
; 0000 001A  i++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001B  if(i==250)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001C  {
; 0000 001D     cnt++;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001E     i=0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001F     if(cnt==99)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0020     {
; 0000 0021         cnt=0;
;PCODE: $0000001E VOL: 0
; 0000 0022         }
; 0000 0023     }
;PCODE: $0000001F VOL: 0
; 0000 0024  TCNT0+=0X06;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0025 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;void FndDisplay(unsigned char data)
; 0000 0028 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0029     int i,j=0;
; 0000 002A     i=(data%100)/10;
;PCODE: $00000029 VOL: 0
;	data -> Y+4
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002B     j=(data%10);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002C 
; 0000 002D     PORTB=(fnd1_on|fnd2_off);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002E     PORTA=Number[i];
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002F     delay_ms(5);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0030     PORTB=(fnd1_off|fnd2_on);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0031     PORTA=Number[j];
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0032     delay_ms(5);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0033 
; 0000 0034 }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;void main(void)
; 0000 0036 {
;PCODE: $0000004F VOL: 0
; 0000 0037 
; 0000 0038 DDRA=0XFF; //PORTA 출력으로 설정
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0039 DDRB=0XFF; //PORTB 출력으로 설정
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003A 
; 0000 003B TCCR0=0x04;//64Prescalel, Overflow Interrupt
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 003C TCNT0=0x06;// Timer Count initialization
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 003D 
; 0000 003E TIMSK=0x01;// Timer(s)/Counter(s) Interrupt(s) initialization
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 003F #asm("sei")// Global enable interrupts
;PCODE: $0000005A VOL: 0
	sei
;PCODE: $0000005B VOL: 0
; 0000 0040 
; 0000 0041 while (1)
;PCODE: $0000005C VOL: 0
; 0000 0042       {
; 0000 0043       FndDisplay(cnt); //타이머 카운터 인터럽트를 이용하여 250ms마다 FND 숫자값은 증가한다.
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0044       }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0045 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
