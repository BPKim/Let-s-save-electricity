;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;?Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2011-07-29
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define MAINCLK     16000000 //메인 크리스탈 클럭
;#define TWI_CLK      100000 //100khz
;
;#define TWBR_SET    (MAINCLK-(16*TWI_CLK))/(4*2*TWI_CLK) //자동으로 TWBR을 구하기 위한공식
;
;char data[4]={0};
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;#define TWIE    0
;#define TWEN    2
;#define TWWC    3
;#define TWSTO   4
;#define TWSTA   5
;#define TWEA    6
;#define TWINT   7
;
;
;void EEPROM_write(char WordAdress,char data)
; 0000 002E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002F     TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
;	WordAdress -> Y+1
;	data -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0030     /*
; 0000 0031     Send START condition
; 0000 0032     */
; 0000 0033     while (!(TWCR & (1<<TWINT)));
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0034     /* Wait for TWINT flag set. This indicates that the
; 0000 0035     START condition has been transmitted
; 0000 0036     */
; 0000 0037     TWDR = 0xd0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0038     /*Load 0xa0 into TWDR Register.Clear TWINT bit in
; 0000 0039     TWCR to start transmission of address
; 0000 003A     */
; 0000 003B     TWCR = (1<<TWINT) |(1<<TWEN);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003C     while (!(TWCR & (1<<TWINT)));
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003D     /* Wait for TWINT flag set. This indicates that the
; 0000 003E     0xa0 has been transmitted, and
; 0000 003F     ACK/NACK has been received.
; 0000 0040     */
; 0000 0041     TWDR = WordAdress;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0042     TWCR = (1<<TWINT) |(1<<TWEN);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0043 
; 0000 0044     /*
; 0000 0045     Load low into TWDR Register. Clear TWINT
; 0000 0046     bit in TWCR to start transmission of data
; 0000 0047     */
; 0000 0048     while (!(TWCR & (1<<TWINT)));
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0049     /*
; 0000 004A     Wait for TWINT flag set. This indicates that the
; 0000 004B     low has been transmitted, and ACK/NACK
; 0000 004C     has been received.
; 0000 004D     */
; 0000 004E     TWDR = data;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004F     TWCR = (1<<TWINT) |(1<<TWEN);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0050     /*
; 0000 0051     Load low into TWDR Register. Clear TWINT
; 0000 0052     bit in TWCR to start transmission of data
; 0000 0053     */
; 0000 0054     while (!(TWCR & (1<<TWINT)));
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0055     /*
; 0000 0056     Wait for TWINT flag set. This indicates that the
; 0000 0057     low has been transmitted, and ACK/NACK
; 0000 0058     has been received.
; 0000 0059     */
; 0000 005A     TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 005B     /*
; 0000 005C     Transmit STOP condition
; 0000 005D     */
; 0000 005E }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;char EEPROM_read(char high)
; 0000 0060 {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0061     char data=0;
; 0000 0062     TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
;PCODE: $00000040 VOL: 0
;	high -> Y+1
;	data -> R17
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0063     /*
; 0000 0064     Send START condition
; 0000 0065     */
; 0000 0066     while (!(TWCR & (1<<TWINT)));
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0067     /*
; 0000 0068     Wait for TWINT flag set. This indicates that the
; 0000 0069     low has been transmitted, and ACK/NACK
; 0000 006A     has been received.
; 0000 006B     */
; 0000 006C     TWDR = 0xd0;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 006D     TWCR = (1<<TWINT) |(1<<TWEN);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006E     /*
; 0000 006F     Load 0xa0 into TWDR Register. Clear TWINT
; 0000 0070     bit in TWCR to start transmission of data
; 0000 0071     */
; 0000 0072     while (!(TWCR & (1<<TWINT)));
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0073     /*
; 0000 0074     Wait for TWINT flag set. This indicates that the
; 0000 0075     low has been transmitted, and ACK/NACK
; 0000 0076     has been received.
; 0000 0077     */
; 0000 0078     TWDR = high;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0079     TWCR = (1<<TWINT) |(1<<TWEN);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 007A     /*
; 0000 007B     Load high into TWDR Register. Clear TWINT
; 0000 007C     bit in TWCR to start transmission of data
; 0000 007D     */
; 0000 007E     while (!(TWCR & (1<<TWINT)));
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 007F     /*
; 0000 0080     Wait for TWINT flag set. This indicates that the
; 0000 0081     low has been transmitted, and ACK/NACK
; 0000 0082     has been received.
; 0000 0083     */
; 0000 0084     TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0085     /*
; 0000 0086     Send RESTART condition
; 0000 0087     */
; 0000 0088     while (!(TWCR & (1<<TWINT)));
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0089     /*
; 0000 008A     Wait for TWINT flag set. This indicates that the
; 0000 008B     low has been transmitted, and ACK/NACK
; 0000 008C     has been received.
; 0000 008D     */
; 0000 008E     TWDR = 0xd1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 008F     TWCR = (1<<TWINT) |(1<<TWEN);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0090     /*
; 0000 0091     Load 0xa0|1 into TWDR Register. Clear TWINT
; 0000 0092     bit in TWCR to start transmission of data
; 0000 0093     */
; 0000 0094     while (!(TWCR & (1<<TWINT)));
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0095     /*
; 0000 0096     Wait for TWINT flag set. This indicates that the
; 0000 0097     low has been transmitted, and ACK/NACK
; 0000 0098     has been received.
; 0000 0099     */
; 0000 009A     TWCR = (1<<TWINT) |(1<<TWEN);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 009B     while (!(TWCR & (1<<TWINT)));
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009C     /*
; 0000 009D     Wait for TWINT flag set. This indicates that the
; 0000 009E     low has been transmitted, and ACK/NACK
; 0000 009F     has been received.
; 0000 00A0     */
; 0000 00A1     data=TWDR;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A2     TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A3     /*
; 0000 00A4     Load TWDR into data. Clear TWINT
; 0000 00A5     bit in TWCR to start transmission of data
; 0000 00A6     */
; 0000 00A7 return data;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A8 }
;PCODE: $00000088 VOL: 0
;
;void main(void)
; 0000 00AB {
;PCODE: $00000089 VOL: 0
; 0000 00AC 
; 0000 00AD DDRD=0XFF;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00AE 
; 0000 00AF // USART0 initialization
; 0000 00B0 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00B1 // USART0 Receiver: Off
; 0000 00B2 // USART0 Transmitter: On
; 0000 00B3 // USART0 Mode: Asynchronous
; 0000 00B4 // USART0 Baud Rate: 9600
; 0000 00B5 UCSR0A=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B6 UCSR0B=0x08;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00B7 UCSR0C=0x06;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00B8 UBRR0H=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B9 UBRR0L=0x67;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00BA 
; 0000 00BB 
; 0000 00BC 
; 0000 00BD // TWI initialization
; 0000 00BE // TWI disabled
; 0000 00BF //TWBR = TWBR_SET;// 105  100kHz
; 0000 00C0 
; 0000 00C1 TWBR = TWBR_SET;// 15  100kHz
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00C2 TWSR=0;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00C3 TWCR=0X04;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00C4 EEPROM_write(00,0); //second
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C5 EEPROM_write(01,0x03);  //minutes
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00C6 EEPROM_write(02,6);   //hour
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C7 EEPROM_write(07,0x03);    //control
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00C8 
; 0000 00C9 while (1)
;PCODE: $000000B0 VOL: 0
; 0000 00CA       {
; 0000 00CB        static unsigned char data,data1,data2=0;
; 0000 00CC        static unsigned char h,m,s=0;
; 0000 00CD 
; 0000 00CE       // Place your code here
; 0000 00CF      // printf("%d \t %d \t %d \t %d \r\n",data[0],data[1],data[2],data[3]);
; 0000 00D0        data=EEPROM_read(0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00D1        data1=(data&0x0f);  // 1의 자리 초
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00D2        data2=(data&0x70);  // 10의 자리 초
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00D3       data2=(data2>>4)*10;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00D4 
; 0000 00D5        s=(data2+data1);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00D6 
; 0000 00D7        data=EEPROM_read(1);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00D8        data1=(data&0x0f);  // 1의 자리 초
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00D9        data2=(data&0x70);  // 10의 자리 초
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00DA        data2=(data2>>4)*10;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00DB        m=(data2+data1);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00DC 
; 0000 00DD        data=EEPROM_read(2);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00DE        data1=(data&0x0f);  // 1의 자리 초
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00DF        data2=(data&0x30);  // 10의 자리 초
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00E0        data2=(data2>>4)*10;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00E1        h=(data2+data1);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00E2 
; 0000 00E3       printf("hour: %d minute: %d second: %d\r\n",h,m,s);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00E4      //  printf("%d\r\n",data);
; 0000 00E5       }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00E6 }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
